plugins {
	id 'org.springframework.boot' version '1.5.8.RELEASE'
	id "com.bmuschko.docker-remote-api" version "4.0.4"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'

// This is used as the docker image prefix
group = 'com.gelerion.microservices'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

ext {
	springCloudVersion = 'Dalston.SR4'
}

jar {
	baseName = 'licensing'
	version = '0.1.0'
}

repositories {
	mavenCentral()
	jcenter()
}

configurations {
	all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-web')
	compile("org.springframework.boot:spring-boot-starter-data-jpa")

	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-actuator-docs')

	compile('org.springframework.boot:spring-boot-starter-log4j2')

	compile('org.springframework.security.oauth:spring-security-oauth2')

	//cloud
	compile('org.springframework.cloud:spring-cloud-starter-config')
	compile('org.springframework.cloud:spring-cloud-config-client')

	compile('org.springframework.cloud:spring-cloud-starter-eureka')
	compile('org.springframework.cloud:spring-cloud-starter-feign')
	compile('org.springframework.cloud:spring-cloud-starter-hystrix')

	compile('org.springframework.cloud:spring-cloud-security')

	//custom
	compile('com.h2database:h2')

	compileOnly('org.projectlombok:lombok')

	testCompile('org.springframework.boot:spring-boot-starter-test')
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = '4.10.2'
}

import org.apache.tools.ant.filters.ReplaceTokens
processResources {
    with copySpec {
		from "$projectDir/docker/Dockerfile"
		into "../../docker/"
	}

	filter(ReplaceTokens, tokens: ['jarName': jar.archiveName])
}

task prepareDocker(type: Copy) {
	from("docker")
	from("${buildDir}/libs") {
		include '**/*.jar'
		rename "licensing-(.*)", 'licensing-server.jar'
	}

	into "${project.buildDir}/docker"
}

build.finalizedBy prepareDocker

//https://bmuschko.github.io/gradle-docker-plugin/
import com.bmuschko.gradle.docker.tasks.image.*
task buildMyAppImage(type: DockerBuildImage) {
	dependsOn build
	inputDir = file("${project.buildDir}/docker")
	tag = 'licensing-server-image:latest'
}
