buildscript {
  dependencies {
    classpath "io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE"
  }
}

plugins {
	id 'org.springframework.boot' version '2.5.6'
//	id "com.bmuschko.docker-spring-boot-application" version "6.7.0"
	id "com.bmuschko.docker-remote-api" version "6.7.0"
}

apply plugin: 'java'
apply plugin: 'idea'
//apply plugin: 'org.springframework.boot'
apply plugin: "io.spring.dependency-management"
//apply plugin: 'com.bmuschko.docker-spring-boot-application'

group = 'com.gelerion.microservices.config'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}


ext {
	springCloudVersion = '2020.0.3'
  mainClassName = 'com.gelerion.microservices.config.ConfigApplication'
  containerName = 'config-server'
}

configurations {
	all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
}

dependencies {
  implementation('org.springframework.cloud:spring-cloud-starter-config')
  implementation('org.springframework.cloud:spring-cloud-config-server')
  implementation('org.springframework.boot:spring-boot-starter-log4j2')

  testImplementation('org.springframework.boot:spring-boot-starter-test')
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

springBoot {
  mainClass = "${mainClassName}"
}

//bootJar {
//  mainClass = "${mainClassName}"
//
//  enabled = false
//  classifier = 'boot'
//}

test {
  useJUnitPlatform()
}

//noinspection GroovyAssignabilityCheck
task prepareDocker(type: Copy) {
    from("docker")
    from("${buildDir}/libs") {
        include '**/*.jar'
        rename "config-(.*)", 'config-server.jar'
    }

    into "${project.buildDir}/docker"

   duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

build.finalizedBy prepareDocker

//https://bmuschko.github.io/gradle-docker-plugin/
import com.bmuschko.gradle.docker.tasks.image.*
import com.bmuschko.gradle.docker.tasks.container.*

task buildImage(type: DockerBuildImage) {
  dependsOn build
  inputDir = file("${project.buildDir}/docker")
  images.add('config-server-image:latest')
}

task removeContainer(type: DockerRemoveContainer) {
    targetContainerId "${containerName}"
    onError { exception ->
        // Ignore exception if container does not exist otherwise throw it
        if (!exception.message.contains('No such container')) throw exception
    }
}

//task createContainer(type: DockerCreateContainer) {
//    dependsOn buildImage
////    targetImageId buildImage.getImageId()
//    containerName = 'config-server'
//    imageId = 'config-server-image'
//    portBindings = ['8888:8888']
//    network = 'gelerion-net'
//    autoRemove = true
//}