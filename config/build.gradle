plugins {
	id 'org.springframework.boot' version '1.5.8.RELEASE'
	id "com.bmuschko.docker-remote-api" version "6.6.1"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'

group = 'com.gelerion.microservices'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
  jcenter()
}


ext {
	springCloudVersion = 'Dalston.SR4'
    mainClassName = 'com.gelerion.microservices.config.ConfigApplication'
    containerName = 'config-server'
}

configurations {
	all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
}

dependencies {
	compile('org.springframework.cloud:spring-cloud-starter-config')
	compile('org.springframework.cloud:spring-cloud-config-server')
	compile('org.springframework.boot:spring-boot-starter-log4j2')

	testCompile('org.springframework.boot:spring-boot-starter-test')
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

bootRepackage{
    enabled = true
}

springBoot {
    mainClass = "${mainClassName}"
}

bootRun {
    addResources = true
}

//noinspection GroovyAssignabilityCheck
task prepareDocker(type: Copy) {
    from("docker")
    from("${buildDir}/libs") {
        include '**/*.jar'
        rename "config-(.*)", 'config-server.jar'
    }

    into "${project.buildDir}/docker"
}

build.finalizedBy prepareDocker

//https://bmuschko.github.io/gradle-docker-plugin/
import com.bmuschko.gradle.docker.tasks.image.*
import com.bmuschko.gradle.docker.tasks.container.*

task buildImage(type: DockerBuildImage) {
  dependsOn build
  inputDir = file("${project.buildDir}/docker")
  images.add('config-server-image:latest')
}

task removeContainer(type: DockerRemoveContainer) {
    targetContainerId "${containerName}"
    onError { exception ->
        // Ignore exception if container does not exist otherwise throw it
        if (!exception.message.contains('No such container')) throw exception
    }
}

//task createContainer(type: DockerCreateContainer) {
//    dependsOn buildImage
////    targetImageId buildImage.getImageId()
//    containerName = 'config-server'
//    imageId = 'config-server-image'
//    portBindings = ['8888:8888']
//    network = 'gelerion-net'
//    autoRemove = true
//}